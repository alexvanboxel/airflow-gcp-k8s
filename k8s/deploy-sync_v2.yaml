apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  labels:
    run: airflow-sync-v2
    version: "0"
  name: airflow-sync-v2
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      run: airflow-sync-v2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: airflow-sync-v2
        version: "0"
    spec:
      volumes:
      - name: airflow-home
        persistentVolumeClaim:
          claimName: airflow-home
      - name: service-account
        secret:
          secretName: "service-account"
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
      - name: airflow-config
        configMap:
          name: airflow-config
      containers:
      - image: eu.gcr.io/vex-eu-cloud-sql-001/airflow-sync-v2:latest
        imagePullPolicy: Always
        name: airflow-sync-v2
        env:
        - name: AIRFLOW_HOME
          value: /etc/airflow
        - name: SYNC_REPO_DAG
          valueFrom:
            configMapKeyRef:
              name: airflow-settings
              key: git-repo-dag
        - name: SYNC_REPO_PLUGIN
          valueFrom:
            configMapKeyRef:
              name: airflow-settings
              key: git-repo-plugin
        - name: SYNC_BRANCH
          valueFrom:
            configMapKeyRef:
              name: airflow-settings
              key: git-branch
        - name: SYNC_STAGING_BUCKET
          valueFrom:
            configMapKeyRef:
              name: airflow-settings
              key: staging-bucket
        volumeMounts:
        - name: airflow-home
          mountPath: /home/airflow
        - name: airflow-config
          mountPath: /etc/airflow
        - name: service-account
          mountPath: /secret
        - name: ssl-certs
          mountPath: /etc/ssl/certs
        command: ["python"]
        args: ["app.py"]
        ports:
        - containerPort: 5000
          protocol: TCP
        resources:
          limits:
            cpu: 1000m
            memory: 800Mi
          requests:
            cpu: 500m
            memory: 400Mi
        resources: {}
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
